<!DOCTYPE html>

  <head>
    <meta charset="utf-8" />
    <script type="text/javascript" src="./lib/joose.js"></script>
    <script type="text/javascript" src="./lib/jquery.js"></script>
    <script type="text/javascript" src="./lib/calculadora.js"></script>
  </head>

  <body>

    <script>

        CALCULADORA_BASICA: {
          Class( "Calculadora" , {
            isa: CalculadoraBase //extende / herda da classe CalculadoraBase. Agora esta classe Calculadora virou uma CalculadoraBase
          } )

          var calc = new Calculadora();
          calc.adicionar( 1, 2 );
          console.log( calc.resultado );
        }

        //Exemplo 2, extendo a calculadora para ter método de cálculo de raiz quadrada

        CALCULADORA_COM_RAIZ_QUADRADA: {
          Class( "Calculadora", {
            isa: CalculadoraBase,
            does: [ RaizQuadrada ]
          } )

          var calc = new Calculadora();
          var raiz = calc.raiz_quadrada(  calc.adicionar( 2, 2 ).resultado  ).resultado;
          console.log( raiz );
        }

        //Exemplo 3, adicionando role de potência
        CALCULADORA_COM_POTENCIA: {
          Class( "Calculadora", {
            isa: CalculadoraBase,
            does: [ Potencia ]
          } )

          var calc = new Calculadora();
          console.log( calc.elevar( 2, 3 ).resultado );
        }

        CALCULADORA_COM_RAIZ_QUADRADA_E_POTENCIA: {
          Class( "Calculadora", {
            isa: CalculadoraBase,
            does: [
              RaizQuadrada,   //agora esta classe implementa as funcionalidades de raiz quadrada
              Potencia,       //agora tambem implementa funcionaldiade de potencia
            ]
          } )

          var calc = new Calculadora();
          console.log( calc.elevar( 2, 3 ).resultado );
          console.log( calc.raiz_quadrada(   calc.elevar( 2, 3 ).resultado ).resultado  );
        }

        CALCULADORA_COM_RAIZ_QUADRADA_E_POTENCIA_E_REGISTRO_DE_OPERACOES: {
          Class( "Calculadora", {
            isa: CalculadoraBase,
            does: [
              RaizQuadrada,   //agora esta classe implementa as funcionalidades de raiz quadrada
              Potencia,       //agora tambem implementa funcionaldiade de potencia
              RegistraOperacoes,
            ]
          } )

          var calc = new Calculadora();
          console.log( calc.elevar( 2, 3 ).resultado );
            calc.raiz_quadrada(
              calc.elevar(
                calc.adicionar( 1,1 ).resultado
                ,
                calc.subtrair( 4, 1 ).resultado
              ).resultado
            ).resultado
          console.log( calc.operacoes );
        }

        CALCULADORA_COM_VIEW: {
          console.log( "calculadora com view" );
          Class("Calculadora", {
            isa: CalculadoraBase,
            does: [
              RaizQuadrada,
              Potencia,
              RegistraOperacoes,
              CalculadoraView,
            ]
          } )
          //neste exemplo, vamos precisar adicionar uma tag no <body>. e o jquery será usado dentro da role CalculadoraView
          //O CalculadoraView é que vai fazer a ponte para manipular o dom, sempre que um resultado for setado. Ou seja,
          //eu vou usar um modificador de método que vai atuar em cima do método setResultado, que
          //é o método que seta o atributo resultado. que está na classe CalculadoraBase. Sempre que
          //esse método for executado, será atualizada a div#calculadora-resultado
          var div_calculadora           = jQuery( "<div>" ).attr( "id", "calculadora-resultado" );
          var div_operacoes_realizadas  = jQuery( "<ul>" ).attr( "id", "calculadora-operacoes-realizadas" );

          jQuery( "body" )
            .append( div_calculadora )
            .append( div_operacoes_realizadas );

          var calc = new Calculadora( {
              elem_calculadora  : div_calculadora,
              elem_operacoes    : div_operacoes_realizadas,
          } );

          calc.adicionar( 1,1 );
          calc.multiplicar( calc.resultado, 2 );
          calc.raiz_quadrada( calc.resultado  );
        }

        EXEMPLO_DE_TYPES: {
          var pessoa = new Pessoa();
          pessoa.setNome( "João" );
          pessoa.setSobrenome( "da Silva" );
          console.log( pessoa.nome );


          var pessoa2 = new Pessoa( {
                   nome : 11,     //passei um numero aqui, automaticamente vai rolar um coerce e nome vai ficar igual a false
              sobrenome : "Silva",
                  idade : 50,
                   peso : 91.2
          } );

          console.log( pessoa2.nome );      //false
          console.log( pessoa2.sobrenome ); //Silva
          console.log( pessoa2.idade );     //50
          console.log( pessoa2.peso );      //91.2 kg
        }

        EXEMPLO_DE_TIPOS_DE_PESSOA : {
          console.log( "----exemplo de pessoas de diferentes tipos" );

          console.log( "  Programador:" );
          PROGRAMADOR: {
            Class( "PessoaProgramador", {
              isa: Pessoa,
              does: [ Programador ]
            } )

            var programador = new PessoaProgramador( {
              nome        : "João",
              linguagem   : "javascript"
            } );
            programador.programar();
          }


          console.log( "  Piloto:" );
          PILOTO: {
            Class( "PessoaPiloto",{
              isa: Pessoa,
              does: [ Piloto ]
            } )

            var piloto = new PessoaPiloto( {
              nome      : "Ayrton",
              sobrenome : "Senna",
              carro     : "F1",
            } );
            piloto.pilotar();
          }

          console.log( "  Mecanico:" );
          MECANICO: {
            Class( "PessoaMecanico", {
              isa: Pessoa,
              does: [ Mecanico ]
            } )

            var mecanico = new PessoaMecanico( {
              nome        : "Joe",
              ferramenta  : "macaco"
            } );
            mecanico.consertar_carro();
          }


          //Agora, os profissionais terão direito a descanço..
          //vou criar uma role descanço que vai botar um modificador de método 'after': programar, pilotar e consertar_carro
          //E vou criar uma classe para eles se prepararem pro trampo, que vai ficar no metodo 'before' programar, pilotar e consertar_carro
          console.log( "--- programador com roles: PreparoProgramador, DescancoProgramador " );
          PROGRAMADOR: {
            Class( "PessoaProgramador", {
              isa: Pessoa,
              does: [ Programador, DescancoProgramador, PreparoProgramador ]
            } )

            var programador = new PessoaProgramador( {
              nome        : "João",
              linguagem   : "javascript"
            } );
            programador.programar();
          }

          console.log( "--- mecânico com roles: PreparoMecanico, DescancoMecanico " );
          MECANICO: {
            Class( "PessoaMecanico", {
              isa: Pessoa,
              does: [ Mecanico, DescancoMecanico, PreparoMecanico ]
            } )

            var mecanico = new PessoaMecanico( {
              nome        : "Joe",
              ferramenta  : "macaco"
            } );
            mecanico.consertar_carro();
          }

          console.log( "--- piloto com roles: PreparoPiloto, DescancoPiloto " );
          PILOTO: {
            Class( "PessoaPiloto",{
              isa: Pessoa,
              does: [ Piloto, DescancoPiloto, PreparoPiloto ]
            } )

            var piloto = new PessoaPiloto( {
              nome      : "Ayrton",
              sobrenome : "Senna",
              carro     : "F1",
            } );
            piloto.pilotar();
          }




        }

    </script>

  </body>

</html>
